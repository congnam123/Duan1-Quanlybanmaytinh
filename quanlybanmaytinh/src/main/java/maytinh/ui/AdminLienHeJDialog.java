/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package maytinh.ui;

import java.text.SimpleDateFormat;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import maytinh.controller.AdminLienHeController;
import maytinh.entity.LienHe;
import maytinh.util.XAuth;

/**
 *
 * @author Cong Nam
 */
public class AdminLienHeJDialog extends javax.swing.JDialog {
    private final AdminLienHeController controller = new AdminLienHeController();
    private LienHe selectedContact = null;

    /**
     * Creates new form AdminLienHeJDialog
     */
    public AdminLienHeJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setTitle("Quản Lý Liên Hệ - Admin");
        customizeComponents();
    }
    
    private void customizeComponents() {
        // Kiểm tra quyền admin
        if (XAuth.user == null || !XAuth.user.isManager()) {
            JOptionPane.showMessageDialog(this, "Bạn không có quyền truy cập!", "Thông báo", JOptionPane.WARNING_MESSAGE);
            this.dispose();
            return;
        }
        
        // Thiết lập giao diện
        tblLienHe.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tblLienHe.setShowGrid(true);
        tblLienHe.setGridColor(new java.awt.Color(230, 230, 230));
        
        // Disable reply components initially
        txtAdminReply.setEnabled(false);
        btnReply.setEnabled(false);
        btnClose.setEnabled(false);
        
        // Load data
        loadAllContacts();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblLienHe = new javax.swing.JTable();
        btnRefresh = new javax.swing.JButton();
        btnPending = new javax.swing.JButton();
        btnAll = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtContactDetail = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtAdminReply = new javax.swing.JTextArea();
        btnReply = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 204));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("QUẢN LÝ LIÊN HỆ KHÁCH HÀNG");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Danh Sách Liên Hệ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(0, 102, 204))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Danh sách liên hệ:");

        tblLienHe.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        tblLienHe.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Người Dùng", "Nội Dung", "Thời Gian", "Trạng Thái"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblLienHe.setRowHeight(25);
        tblLienHe.setSelectionBackground(new java.awt.Color(230, 240, 255));
        tblLienHe.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblLienHeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblLienHe);

        btnRefresh.setBackground(new java.awt.Color(0, 153, 255));
        btnRefresh.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnRefresh.setForeground(new java.awt.Color(255, 255, 255));
        btnRefresh.setText("Làm Mới");
        btnRefresh.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnPending.setBackground(new java.awt.Color(255, 153, 0));
        btnPending.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnPending.setForeground(new java.awt.Color(255, 255, 255));
        btnPending.setText("Chưa Trả Lời");
        btnPending.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPending.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPendingActionPerformed(evt);
            }
        });

        btnAll.setBackground(new java.awt.Color(102, 102, 102));
        btnAll.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnAll.setForeground(new java.awt.Color(255, 255, 255));
        btnAll.setText("Tất Cả");
        btnAll.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnAll, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnPending, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAll, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPending, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Chi Tiết & Trả Lời", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(0, 102, 204))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel3.setText("Nội dung liên hệ:");

        txtContactDetail.setEditable(false);
        txtContactDetail.setBackground(new java.awt.Color(245, 245, 245));
        txtContactDetail.setColumns(20);
        txtContactDetail.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        txtContactDetail.setRows(5);
        jScrollPane2.setViewportView(txtContactDetail);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel4.setText("Trả lời của admin:");

        txtAdminReply.setColumns(20);
        txtAdminReply.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        txtAdminReply.setRows(5);
        jScrollPane3.setViewportView(txtAdminReply);

        btnReply.setBackground(new java.awt.Color(0, 153, 51));
        btnReply.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnReply.setForeground(new java.awt.Color(255, 255, 255));
        btnReply.setText("Gửi Trả Lời");
        btnReply.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnReply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReplyActionPerformed(evt);
            }
        });

        btnClose.setBackground(new java.awt.Color(204, 0, 0));
        btnClose.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnClose.setForeground(new java.awt.Color(255, 255, 255));
        btnClose.setText("Đóng Liên Hệ");
        btnClose.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnReply, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReply, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void tblLienHeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblLienHeMouseClicked
        int selectedRow = tblLienHe.getSelectedRow();
        if (selectedRow >= 0) {
            int id = (Integer) tblLienHe.getValueAt(selectedRow, 0);
            selectedContact = controller.getLienHeById(id);

            if (selectedContact != null) {
                displayContactDetail();
                enableReplyComponents();
            }
        }
    }//GEN-LAST:event_tblLienHeMouseClicked

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        loadAllContacts();
        clearSelection();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnPendingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPendingActionPerformed
        loadPendingContacts();
        clearSelection();
    }//GEN-LAST:event_btnPendingActionPerformed

    private void btnAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllActionPerformed
        loadAllContacts();
        clearSelection();
    }//GEN-LAST:event_btnAllActionPerformed

    private void btnReplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReplyActionPerformed
        if (selectedContact == null) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một liên hệ để trả lời!", "Thông báo", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String reply = txtAdminReply.getText().trim();
        if (reply.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập nội dung trả lời!", "Thông báo", JOptionPane.WARNING_MESSAGE);
            txtAdminReply.requestFocus();
            return;
        }

        if (reply.length() < 5) {
            JOptionPane.showMessageDialog(this, "Nội dung trả lời phải có ít nhất 5 ký tự!", "Thông báo", JOptionPane.WARNING_MESSAGE);
            txtAdminReply.requestFocus();
            return;
        }

        try {
            controller.replyContact(selectedContact.getId(), reply);
            JOptionPane.showMessageDialog(this, "Đã gửi trả lời thành công!", "Thành công", JOptionPane.INFORMATION_MESSAGE);

            // Refresh data
            loadAllContacts();
            clearSelection();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Có lỗi xảy ra khi gửi trả lời!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnReplyActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        if (selectedContact == null) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một liên hệ để đóng!", "Thông báo", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this,
            "Bạn có chắc chắn muốn đóng liên hệ này?\nSau khi đóng sẽ không thể trả lời thêm.",
            "Xác nhận", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            try {
                controller.closeContact(selectedContact.getId());
                JOptionPane.showMessageDialog(this, "Đã đóng liên hệ thành công!", "Thành công", JOptionPane.INFORMATION_MESSAGE);

                // Refresh data
                loadAllContacts();
                clearSelection();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Có lỗi xảy ra khi đóng liên hệ!", "Lỗi", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnCloseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminLienHeJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminLienHeJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminLienHeJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminLienHeJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AdminLienHeJDialog dialog = new AdminLienHeJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAll;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnPending;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnReply;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tblLienHe;
    private javax.swing.JTextArea txtAdminReply;
    private javax.swing.JTextArea txtContactDetail;
    // End of variables declaration//GEN-END:variables

    // Helper methods
    private void loadAllContacts() {
        try {
            List<LienHe> list = controller.getAllLienHe();
            fillTable(list);
            updateTitle("Tất cả liên hệ", list.size());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Có lỗi khi tải dữ liệu!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    private void loadPendingContacts() {
        try {
            List<LienHe> list = controller.getPendingContacts();
            fillTable(list);
            updateTitle("Liên hệ chưa trả lời", list.size());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Có lỗi khi tải dữ liệu!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    private void fillTable(List<LienHe> list) {
        DefaultTableModel model = (DefaultTableModel) tblLienHe.getModel();
        model.setRowCount(0);

        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm");

        for (LienHe lh : list) {
            String formattedTime = lh.getThoigian() != null ? sdf.format(lh.getThoigian()) : "";
            String shortContent = lh.getNoidung().length() > 40 ?
                lh.getNoidung().substring(0, 40) + "..." : lh.getNoidung();
            String status = getStatusText(lh.getStatus());

            model.addRow(new Object[]{
                lh.getId(),
                lh.getUsername(),
                shortContent,
                formattedTime,
                status
            });
        }

        // Cải thiện giao diện bảng
        if (tblLienHe.getColumnModel().getColumnCount() > 0) {
            tblLienHe.getColumnModel().getColumn(0).setPreferredWidth(50);  // ID
            tblLienHe.getColumnModel().getColumn(1).setPreferredWidth(100); // Username
            tblLienHe.getColumnModel().getColumn(2).setPreferredWidth(250); // Nội dung
            tblLienHe.getColumnModel().getColumn(3).setPreferredWidth(120); // Thời gian
            tblLienHe.getColumnModel().getColumn(4).setPreferredWidth(80);  // Trạng thái
        }
    }

    private String getStatusText(String status) {
        if (status == null) return "Chưa xử lý";
        switch (status.toLowerCase()) {
            case "pending": return "Chưa trả lời";
            case "replied": return "Đã trả lời";
            case "closed": return "Đã đóng";
            default: return "Không xác định";
        }
    }

    private void updateTitle(String type, int count) {
        jLabel2.setText(type + " (" + count + " liên hệ):");
    }

    private void displayContactDetail() {
        if (selectedContact == null) return;

        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        StringBuilder detail = new StringBuilder();

        detail.append("Người gửi: ").append(selectedContact.getUsername()).append("\n");
        detail.append("Thời gian: ").append(sdf.format(selectedContact.getThoigian())).append("\n");
        detail.append("Trạng thái: ").append(getStatusText(selectedContact.getStatus())).append("\n\n");
        detail.append("Nội dung:\n").append(selectedContact.getNoidung());

        if (selectedContact.getAdminReply() != null && !selectedContact.getAdminReply().trim().isEmpty()) {
            detail.append("\n\n--- Trả lời của Admin ---\n");
            detail.append("Thời gian trả lời: ").append(sdf.format(selectedContact.getAdminReplyTime())).append("\n");
            detail.append("Nội dung trả lời:\n").append(selectedContact.getAdminReply());
        }

        txtContactDetail.setText(detail.toString());
        txtContactDetail.setCaretPosition(0);

        // Clear reply text if already replied
        if ("replied".equals(selectedContact.getStatus()) || "closed".equals(selectedContact.getStatus())) {
            txtAdminReply.setText("");
            txtAdminReply.setEnabled(false);
            btnReply.setEnabled(false);
        } else {
            txtAdminReply.setText("");
            txtAdminReply.setEnabled(true);
            btnReply.setEnabled(true);
        }
    }

    private void enableReplyComponents() {
        if (selectedContact == null) return;

        boolean canReply = "pending".equals(selectedContact.getStatus());
        txtAdminReply.setEnabled(canReply);
        btnReply.setEnabled(canReply);
        btnClose.setEnabled(!"closed".equals(selectedContact.getStatus()));
    }

    private void clearSelection() {
        selectedContact = null;
        txtContactDetail.setText("");
        txtAdminReply.setText("");
        txtAdminReply.setEnabled(false);
        btnReply.setEnabled(false);
        btnClose.setEnabled(false);
        tblLienHe.clearSelection();
    }
}